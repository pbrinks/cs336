Explain:
	i. The component structure of the application. What makes the UI composable and why does this matter?
		Compennets allow you to split the UI onto independent, reusable pieces, and think about each piece in isolation.

	ii. what JSX does.
		Allows the user to transforl XML-syntax into JavaScript.

	iii. How the data flows through the components; how are comments loaded? created? saved?
		The input sends an event, which goes back to CommentBox, which updates itself. Then, the data flows to the children if anything changed. 
		Comments are loaded with componentDidMount. New comments are added by setting the state of the author and text, and the comments are saved by updating the server with  handleCommentSubmit.

	iv. the nature and purpose of props and state; which is immutable and which is mutable and why does this distinction matter?
		Props is immutable, they are passed from the parent and are "owned" by the parent. State is mutable and implements interactions. This is important, because you therefore shouldn't use props for children.


Consider the following, more detailed questions based on statements in the tutorial.
	i. Try editing the comments.json file (to add or remove a legal comment). What happens and why?
		The webpage automatically updates itself, this happens because we are using componentDidMount to load the comments from the server, and we are doing this every two seconds.
	
	ii. When the CommentBox has loaded comments from the server (in loadCommentsFromServer()), why doesn’t it call render() to make them visible?
		Because these components are already visible, they are just being updated.

	iii. Why should components always represent the current state of the view?
		So that the state of the DOM always matches the state of the component. 

	iv. The app implements optimistic updates. Isn’t optimism here more like foolishness? What if the server rejects the new comment (for whatever reason)?
		Yes, since it is using Date.now() in order to create the comment ID we could end up with multiple comments with the same ID, if two users are posting at the same time. This would be foolish to use on a website. If two comments are posted with the same ID, then it will only show the original comment with that ID.